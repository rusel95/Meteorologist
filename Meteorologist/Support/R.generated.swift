//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 13 images.
  struct image {
    /// Image `clear-day`.
    static let clearDay = Rswift.ImageResource(bundle: R.hostingBundle, name: "clear-day")
    /// Image `clear-night`.
    static let clearNight = Rswift.ImageResource(bundle: R.hostingBundle, name: "clear-night")
    /// Image `cloudy`.
    static let cloudy = Rswift.ImageResource(bundle: R.hostingBundle, name: "cloudy")
    /// Image `fog`.
    static let fog = Rswift.ImageResource(bundle: R.hostingBundle, name: "fog")
    /// Image `launch3`.
    static let launch3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "launch3")
    /// Image `partly-cloudy-day`.
    static let partlyCloudyDay = Rswift.ImageResource(bundle: R.hostingBundle, name: "partly-cloudy-day")
    /// Image `partly-cloudy-night`.
    static let partlyCloudyNight = Rswift.ImageResource(bundle: R.hostingBundle, name: "partly-cloudy-night")
    /// Image `rainy`.
    static let rainy = Rswift.ImageResource(bundle: R.hostingBundle, name: "rainy")
    /// Image `snow`.
    static let snow = Rswift.ImageResource(bundle: R.hostingBundle, name: "snow")
    /// Image `sunny2`.
    static let sunny2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "sunny2")
    /// Image `sunny3`.
    static let sunny3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "sunny3")
    /// Image `sunny4`.
    static let sunny4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "sunny4")
    /// Image `wind`.
    static let wind = Rswift.ImageResource(bundle: R.hostingBundle, name: "wind")
    
    /// `UIImage(named: "clear-day", bundle: ..., traitCollection: ...)`
    static func clearDay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clearDay, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "clear-night", bundle: ..., traitCollection: ...)`
    static func clearNight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clearNight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cloudy", bundle: ..., traitCollection: ...)`
    static func cloudy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cloudy, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "fog", bundle: ..., traitCollection: ...)`
    static func fog(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fog, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "launch3", bundle: ..., traitCollection: ...)`
    static func launch3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launch3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "partly-cloudy-day", bundle: ..., traitCollection: ...)`
    static func partlyCloudyDay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.partlyCloudyDay, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "partly-cloudy-night", bundle: ..., traitCollection: ...)`
    static func partlyCloudyNight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.partlyCloudyNight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "rainy", bundle: ..., traitCollection: ...)`
    static func rainy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rainy, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "snow", bundle: ..., traitCollection: ...)`
    static func snow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.snow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sunny2", bundle: ..., traitCollection: ...)`
    static func sunny2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sunny2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sunny3", bundle: ..., traitCollection: ...)`
    static func sunny3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sunny3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sunny4", bundle: ..., traitCollection: ...)`
    static func sunny4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sunny4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wind", bundle: ..., traitCollection: ...)`
    static func wind(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wind, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `WeatherItemTVC`.
    static let weatherItemTVC = _R.nib._WeatherItemTVC()
    
    /// `UINib(name: "WeatherItemTVC", in: bundle)`
    static func weatherItemTVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.weatherItemTVC)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `weatherItemTVC`.
    static let weatherItemTVC: Rswift.ReuseIdentifier<WeatherItemTVC> = Rswift.ReuseIdentifier(identifier: "weatherItemTVC")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _WeatherItemTVC: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = WeatherItemTVC
      
      let bundle = R.hostingBundle
      let identifier = "weatherItemTVC"
      let name = "WeatherItemTVC"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> WeatherItemTVC? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WeatherItemTVC
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "launch3") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'launch3' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MainVC
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      static func validate() throws {
        if UIKit.UIImage(named: "launch3") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'launch3' is used in storyboard 'Main', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
